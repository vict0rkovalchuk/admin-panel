{"version":3,"sources":["hooks/http.hook.js","components/heroesList/heroesSlice.js","components/heroesListItem/HeroesListItem.js","components/spinner/Spinner.js","components/heroesList/HeroesList.js","components/heroesAddForm/filtersSlice.js","store/index.js","components/heroesAddForm/HeroesAddForm.js","components/heroesFilters/HeroesFilters.js","components/app/App.js","index.js"],"names":["useHttp","request","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","heroesAdapter","createEntityAdapter","initialState","getInitialState","heroesLoadingStatus","fetchHeroes","createAsyncThunk","heroesSlice","createSlice","name","reducers","addHero","state","action","addOne","payload","deleteHero","removeOne","extraReducers","builder","addCase","pending","fulfilled","setAll","rejected","addDefaultCase","actions","reducer","selectAll","getSelectors","heroes","filteredHeroesSelector","createSelector","filters","activeFilter","filter","item","element","heroesFetching","heroesFetched","heroesFetchingError","HeroesListItem","elementClassName","description","onDelete","className","src","alt","style","objectFit","onClick","type","aria-label","Spinner","role","HeroesList","filteredHeroes","useSelector","dispatch","useDispatch","useEffect","useCallback","id","then","console","log","catch","err","arr","elements","length","CSSTransition","timeout","classNames","map","props","TransitionGroup","component","filtersAdapter","filtersLoadingStatus","fetchFilters","filtersSlice","activeFilterChanged","filtersFetching","filtersFetched","filtersFetchingError","stringMiddleware","next","store","configureStore","middleware","getDefaultMiddleware","concat","devTools","process","HeroesAddForm","useState","setName","text","setText","setElement","getState","content","onInputChange","e","target","value","loader","error","unshift","onSubmit","preventDefault","newHero","uuidv4","JSON","stringify","htmlFor","onChange","required","placeholder","height","HeroesFilters","active","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d469eee.chunk.js","sourcesContent":["export const useHttp = () => {\n  const request = async (\n    url,\n    method = 'GET',\n    body = null,\n    headers = { 'Content-Type': 'application/json' }\n  ) => {\n    try {\n      const response = await fetch(url, { method, body, headers });\n\n      if (!response.ok) {\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      return data;\n    } catch (e) {\n      throw e;\n    }\n  };\n\n  return {\n    request\n  };\n};\n","import {\r\n  createSlice,\r\n  createAsyncThunk,\r\n  createEntityAdapter,\r\n  createSelector\r\n} from '@reduxjs/toolkit';\r\nimport { useHttp } from '../../hooks/http.hook';\r\n\r\nconst heroesAdapter = createEntityAdapter();\r\n\r\nconst initialState = heroesAdapter.getInitialState({\r\n  heroesLoadingStatus: 'idle'\r\n});\r\n\r\nexport const fetchHeroes = createAsyncThunk('heroes/fetchHeroes', () => {\r\n  const { request } = useHttp();\r\n  return request(\r\n    'https://my-json-server.typicode.com/vict0rkovalchuk/admin-panel/heroes'\r\n  );\r\n});\r\n\r\nconst heroesSlice = createSlice({\r\n  name: 'heroes',\r\n  initialState,\r\n  reducers: {\r\n    addHero: (state, action) => {\r\n      heroesAdapter.addOne(state, action.payload);\r\n    },\r\n    deleteHero: (state, action) => {\r\n      heroesAdapter.removeOne(state, action.payload);\r\n    }\r\n  },\r\n  extraReducers: builder => {\r\n    builder\r\n      .addCase(fetchHeroes.pending, state => {\r\n        state.heroesLoadingStatus = 'loading';\r\n      })\r\n      .addCase(fetchHeroes.fulfilled, (state, action) => {\r\n        heroesAdapter.setAll(state, action.payload);\r\n        state.heroesLoadingStatus = 'idle';\r\n      })\r\n      .addCase(fetchHeroes.rejected, state => {\r\n        state.heroesLoadingStatus = 'error';\r\n      })\r\n      .addDefaultCase(() => {});\r\n  }\r\n});\r\n\r\nconst { actions, reducer } = heroesSlice;\r\n\r\nexport default reducer;\r\n\r\nconst { selectAll } = heroesAdapter.getSelectors(state => state.heroes);\r\n\r\nexport const filteredHeroesSelector = createSelector(\r\n  state => state.filters.activeFilter,\r\n  selectAll,\r\n  (filter, heroes) => {\r\n    if (filter === 'all') {\r\n      return heroes;\r\n    } else {\r\n      return heroes.filter(item => item.element === filter);\r\n    }\r\n  }\r\n);\r\n\r\nexport const {\r\n  heroesFetching,\r\n  heroesFetched,\r\n  heroesFetchingError,\r\n  addHero,\r\n  deleteHero\r\n} = actions;\r\n","const HeroesListItem = ({ name, description, element, onDelete }) => {\n  let elementClassName;\n\n  switch (element) {\n    case 'fire':\n      elementClassName = 'bg-danger bg-gradient';\n      break;\n    case 'water':\n      elementClassName = 'bg-primary bg-gradient';\n      break;\n    case 'wind':\n      elementClassName = 'bg-success bg-gradient';\n      break;\n    case 'earth':\n      elementClassName = 'bg-secondary bg-gradient';\n      break;\n    default:\n      elementClassName = 'bg-warning bg-gradient';\n  }\n\n  return (\n    <li\n      className={`card flex-row mb-4 shadow-lg text-white ${elementClassName}`}\n    >\n      <img\n        src=\"https://snworksceo.imgix.net/dtc/3f037af6-87ce-4a37-bb37-55b48029727d.sized-1000x1000.jpg?w=1000\"\n        className=\"img-fluid w-25 d-inline\"\n        alt=\"unknown hero\"\n        style={{ objectFit: 'cover' }}\n      />\n      <div className=\"card-body\">\n        <h3 className=\"card-title\">{name}</h3>\n        <p className=\"card-text\">{description}</p>\n      </div>\n      <span\n        onClick={onDelete}\n        className=\"position-absolute top-0 start-100 translate-middle badge border rounded-pill bg-light\"\n      >\n        <button\n          type=\"button\"\n          className=\"btn-close btn-close\"\n          aria-label=\"Close\"\n        ></button>\n      </span>\n    </li>\n  );\n};\n\nexport default HeroesListItem;\n","\nconst Spinner = () => {\n    return (\n        <div className=\"spinner-border mx-auto mt-5\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </div>\n    )\n}\n\nexport default Spinner;","import { useHttp } from '../../hooks/http.hook';\nimport { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport { deleteHero, fetchHeroes, filteredHeroesSelector } from './heroesSlice';\nimport HeroesListItem from '../heroesListItem/HeroesListItem';\nimport Spinner from '../spinner/Spinner';\n\n// Задача для этого компонента:\n// При клике на \"крестик\" идет удаление персонажа из общего состояния\n// Усложненная задача:\n// Удаление идет и с json файла при помощи метода DELETE\n\nconst HeroesList = () => {\n  const filteredHeroes = useSelector(filteredHeroesSelector);\n  const heroesLoadingStatus = useSelector(\n    state => state.heroes.heroesLoadingStatus\n  );\n  const dispatch = useDispatch();\n  const { request } = useHttp();\n\n  useEffect(() => {\n    // dispatch(heroesFetching());\n    // dispatch('HEROES_FETCHING');\n    dispatch(fetchHeroes());\n\n    // eslint-disable-next-line\n  }, []);\n\n  const onDelete = useCallback(\n    id => {\n      // request(`http://localhost:3001/heroes/${id}`, 'DELETE')\n      request(\n        `https://my-json-server.typicode.com/vict0rkovalchuk/admin-panel/heroes/${id}`,\n        'DELETE'\n      )\n        .then(data => console.log(data, 'Deleted'))\n        .then(dispatch(deleteHero(id)))\n        .catch(err => console.log(err));\n    },\n    [request]\n  );\n\n  if (heroesLoadingStatus === 'loading') {\n    return <Spinner />;\n  } else if (heroesLoadingStatus === 'error') {\n    return <h5 className=\"text-center mt-5\">Ошибка загрузки</h5>;\n  }\n\n  const renderHeroesList = arr => {\n    if (arr.length === 0) {\n      return (\n        <CSSTransition timeout={0} classNames=\"csstransition\">\n          <h5 className=\"text-center mt-5\">Героев пока нет</h5>\n        </CSSTransition>\n      );\n    }\n\n    return arr.map(({ id, ...props }) => {\n      return (\n        <CSSTransition key={id} timeout={500} classNames=\"csstransition\">\n          <HeroesListItem key={id} {...props} onDelete={() => onDelete(id)} />\n        </CSSTransition>\n      );\n    });\n  };\n\n  const elements = renderHeroesList(filteredHeroes);\n  return <TransitionGroup component=\"ul\">{elements} </TransitionGroup>;\n};\n\nexport default HeroesList;\n","import {\r\n  createSlice,\r\n  createAsyncThunk,\r\n  createEntityAdapter\r\n} from '@reduxjs/toolkit';\r\nimport { useHttp } from '../../hooks/http.hook';\r\n\r\nconst filtersAdapter = createEntityAdapter();\r\n\r\nconst initialState = filtersAdapter.getInitialState({\r\n  filtersLoadingStatus: 'idle',\r\n  activeFilter: 'all'\r\n});\r\n\r\n// const initialState = {\r\n//   filtersLoadingStatus: 'idle',\r\n//   filters: [],\r\n//   activeFilter: 'all'\r\n// };\r\n\r\nexport const fetchFilters = createAsyncThunk('filters/fetchFilters', () => {\r\n  const { request } = useHttp();\r\n  return request(\r\n    'https://my-json-server.typicode.com/vict0rkovalchuk/admin-panel/filters'\r\n  );\r\n});\r\n\r\nconst filtersSlice = createSlice({\r\n  name: 'filters',\r\n  initialState,\r\n  reducers: {\r\n    activeFilterChanged: (state, action) => {\r\n      state.activeFilter = action.payload;\r\n    }\r\n  },\r\n  extraReducers: builder => {\r\n    builder\r\n      .addCase(fetchFilters.pending, state => {\r\n        state.filtersLoadingStatus = 'loading';\r\n      })\r\n      .addCase(fetchFilters.fulfilled, (state, action) => {\r\n        filtersAdapter.setAll(state, action.payload);\r\n        state.filtersLoadingStatus = 'idle';\r\n      })\r\n      .addCase(fetchFilters.rejected, state => {\r\n        state.filtersLoadingStatus = 'error';\r\n      })\r\n      .addDefaultCase(() => {});\r\n  }\r\n});\r\n\r\nconst { actions, reducer } = filtersSlice;\r\n\r\nexport default reducer;\r\n\r\nexport const { selectAll } = filtersAdapter.getSelectors(\r\n  state => state.filters\r\n);\r\nexport const {\r\n  filtersFetching,\r\n  filtersFetched,\r\n  filtersFetchingError,\r\n  activeFilterChanged\r\n} = actions;\r\n","import { configureStore } from '@reduxjs/toolkit';\nimport heroes from '../components/heroesList/heroesSlice';\nimport filters from '../components/heroesAddForm/filtersSlice';\n\nconst stringMiddleware = () => next => action => {\n  if (typeof action === 'string') {\n    return next({\n      type: action\n    });\n  }\n  return next(action);\n};\n\nconst store = configureStore({\n  reducer: {\n    heroes,\n    filters\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware().concat(stringMiddleware),\n  devTools: process.env.NODE_ENV !== 'production'\n});\n\nexport default store;\n","import { useHttp } from '../../hooks/http.hook';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport store from '../../store';\n\nimport { fetchFilters, selectAll } from '../heroesAddForm/filtersSlice';\n\nimport { addHero } from '../heroesList/heroesSlice';\n\nimport { v4 as uuidv4 } from 'uuid';\n\n// Задача для этого компонента:\n// Реализовать создание нового героя с введенными данными. Он должен попадать\n// в общее состояние и отображаться в списке + фильтроваться\n// Уникальный идентификатор персонажа можно сгенерировать через uiid\n// Усложненная задача:\n// Персонаж создается и в файле json при помощи метода POST\n// Дополнительно:\n// Элементы <option></option> желательно сформировать на базе\n// данных из фильтров\n\nconst HeroesAddForm = () => {\n  const [name, setName] = useState('');\n  const [text, setText] = useState('');\n  const [element, setElement] = useState('');\n\n  const { filtersLoadingStatus } = useSelector(state => state.filters);\n  const filters = selectAll(store.getState());\n  const dispatch = useDispatch();\n  const { request } = useHttp();\n\n  useEffect(() => {\n    dispatch(fetchFilters());\n\n    // eslint-disable-next-line\n  }, []);\n\n  const onInputChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'text':\n        setText(e.target.value);\n        break;\n      case 'element':\n        setElement(e.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const newHero = {\n      id: uuidv4(),\n      name,\n      description: text,\n      element\n    };\n    // request(`http://localhost:3001/heroes`, 'POST', JSON.stringify(newHero))\n    request(\n      `https://my-json-server.typicode.com/vict0rkovalchuk/admin-panel/heroes`,\n      'POST',\n      JSON.stringify(newHero)\n    )\n      .then(data => console.log(data, 'Posted'))\n      .then(dispatch(addHero(newHero)))\n      .catch(err => console.log(err));\n    setName('');\n    setText('');\n    setElement('');\n  };\n\n  const loader =\n    filtersLoadingStatus === 'loading' ? (\n      <option>Загрузка элементов...</option>\n    ) : null;\n  const error =\n    filtersLoadingStatus === 'error' ? <option>Ошибка загрузки</option> : null;\n\n  let content;\n  if (filters && filters.length > 0) {\n    content = filters.map(({ value, name }) => {\n      if (value !== 'all') {\n        return (\n          <option key={value} value={value}>\n            {name}\n          </option>\n        );\n      }\n      return null;\n    });\n    content.unshift(\n      <option key=\"\" value=\"\">\n        Я владею элементом...\n      </option>\n    );\n  }\n\n  return (\n    <form onSubmit={onSubmit} className=\"border p-4 shadow-lg rounded\">\n      <div className=\"mb-3\">\n        <label htmlFor=\"name\" className=\"form-label fs-4\">\n          Имя нового героя\n        </label>\n        <input\n          value={name}\n          onChange={onInputChange}\n          required\n          type=\"text\"\n          name=\"name\"\n          className=\"form-control\"\n          id=\"name\"\n          placeholder=\"Как меня зовут?\"\n        />\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"text\" className=\"form-label fs-4\">\n          Описание\n        </label>\n        <textarea\n          value={text}\n          onChange={onInputChange}\n          required\n          name=\"text\"\n          className=\"form-control\"\n          id=\"text\"\n          placeholder=\"Что я умею?\"\n          style={{ height: '130px' }}\n        />\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"element\" className=\"form-label\">\n          Выбрать элемент героя\n        </label>\n        <select\n          value={element}\n          onChange={onInputChange}\n          required\n          className=\"form-select\"\n          id=\"element\"\n          name=\"element\"\n        >\n          {loader}\n          {error}\n          {content}\n        </select>\n      </div>\n\n      <button type=\"submit\" className=\"btn btn-primary\">\n        Создать\n      </button>\n    </form>\n  );\n};\n\nexport default HeroesAddForm;\n","import { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport store from '../../store';\n\nimport {\n  activeFilterChanged,\n  selectAll\n} from '../../components/heroesAddForm/filtersSlice';\n\n// Задача для этого компонента:\n// Фильтры должны формироваться на основании загруженных данных\n// Фильтры должны отображать только нужных героев при выборе\n// Активный фильтр имеет класс active\n// Изменять json-файл для удобства МОЖНО!\n// Представьте, что вы попросили бэкенд-разработчика об этом\n\nconst HeroesFilters = () => {\n  const { activeFilter, filtersLoadingStatus } = useSelector(\n    state => state.filters\n  );\n  const filters = selectAll(store.getState());\n  const dispatch = useDispatch();\n\n  const loader =\n    filtersLoadingStatus === 'loading' ? (\n      <div>Загрузка элементов...</div>\n    ) : null;\n  const error =\n    filtersLoadingStatus === 'error' ? <div>Ошибка загрузки</div> : null;\n  const content =\n    filtersLoadingStatus === 'idle'\n      ? filters.map(({ value, className, name }) => {\n          return (\n            <button\n              onClick={() => dispatch(activeFilterChanged(value))}\n              key={value}\n              className={classNames('btn', `${className}`, {\n                active: value === activeFilter\n              })}\n            >\n              {name}\n            </button>\n          );\n        })\n      : null;\n\n  return (\n    <div className=\"card shadow-lg mt-4\">\n      <div className=\"card-body\">\n        <p className=\"card-text\">Отфильтруйте героев по элементам</p>\n        <div className=\"btn-group\">\n          {loader}\n          {error}\n          {content}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HeroesFilters;\n","import HeroesList from '../heroesList/HeroesList';\nimport HeroesAddForm from '../heroesAddForm/HeroesAddForm';\nimport HeroesFilters from '../heroesFilters/HeroesFilters';\n\nimport './app.scss';\n\nconst App = () => {\n    \n    return (\n        <main className=\"app\">\n            <div className=\"content\">\n                <HeroesList/>\n                <div className=\"content__interactive\">\n                    <HeroesAddForm/>\n                    <HeroesFilters/>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/app/App';\nimport store from './store';\n\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}